// Generated by gencpp from file husky_gazebo_plugins/WheelSpeeds.msg
// DO NOT EDIT!


#ifndef HUSKY_GAZEBO_PLUGINS_MESSAGE_WHEELSPEEDS_H
#define HUSKY_GAZEBO_PLUGINS_MESSAGE_WHEELSPEEDS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace husky_gazebo_plugins
{
template <class ContainerAllocator>
struct WheelSpeeds_
{
  typedef WheelSpeeds_<ContainerAllocator> Type;

  WheelSpeeds_()
    : back_left_wheel(0.0)
    , back_right_wheel(0.0)
    , front_left_wheel(0.0)
    , front_right_wheel(0.0)  {
    }
  WheelSpeeds_(const ContainerAllocator& _alloc)
    : back_left_wheel(0.0)
    , back_right_wheel(0.0)
    , front_left_wheel(0.0)
    , front_right_wheel(0.0)  {
  (void)_alloc;
    }



   typedef double _back_left_wheel_type;
  _back_left_wheel_type back_left_wheel;

   typedef double _back_right_wheel_type;
  _back_right_wheel_type back_right_wheel;

   typedef double _front_left_wheel_type;
  _front_left_wheel_type front_left_wheel;

   typedef double _front_right_wheel_type;
  _front_right_wheel_type front_right_wheel;





  typedef boost::shared_ptr< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> const> ConstPtr;

}; // struct WheelSpeeds_

typedef ::husky_gazebo_plugins::WheelSpeeds_<std::allocator<void> > WheelSpeeds;

typedef boost::shared_ptr< ::husky_gazebo_plugins::WheelSpeeds > WheelSpeedsPtr;
typedef boost::shared_ptr< ::husky_gazebo_plugins::WheelSpeeds const> WheelSpeedsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator1> & lhs, const ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator2> & rhs)
{
  return lhs.back_left_wheel == rhs.back_left_wheel &&
    lhs.back_right_wheel == rhs.back_right_wheel &&
    lhs.front_left_wheel == rhs.front_left_wheel &&
    lhs.front_right_wheel == rhs.front_right_wheel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator1> & lhs, const ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace husky_gazebo_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ce71b24a610adb7c8e0a82f915a151f";
  }

  static const char* value(const ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ce71b24a610adb7ULL;
  static const uint64_t static_value2 = 0xc8e0a82f915a151fULL;
};

template<class ContainerAllocator>
struct DataType< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "husky_gazebo_plugins/WheelSpeeds";
  }

  static const char* value(const ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 back_left_wheel # back left wheel speed in m/s\n"
"float64 back_right_wheel # back right wheel speed in m/s\n"
"float64 front_left_wheel # front left wheel speed in m/s\n"
"float64 front_right_wheel # front right wheel speed in m/s\n"
;
  }

  static const char* value(const ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.back_left_wheel);
      stream.next(m.back_right_wheel);
      stream.next(m.front_left_wheel);
      stream.next(m.front_right_wheel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelSpeeds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::husky_gazebo_plugins::WheelSpeeds_<ContainerAllocator>& v)
  {
    s << indent << "back_left_wheel: ";
    Printer<double>::stream(s, indent + "  ", v.back_left_wheel);
    s << indent << "back_right_wheel: ";
    Printer<double>::stream(s, indent + "  ", v.back_right_wheel);
    s << indent << "front_left_wheel: ";
    Printer<double>::stream(s, indent + "  ", v.front_left_wheel);
    s << indent << "front_right_wheel: ";
    Printer<double>::stream(s, indent + "  ", v.front_right_wheel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUSKY_GAZEBO_PLUGINS_MESSAGE_WHEELSPEEDS_H
